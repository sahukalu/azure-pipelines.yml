trigger:
  branches:
    include:
      - main

parameters:
  - name: FRONTEND_DOCKER_TAG
    type: string
    default: ''
  - name: BACKEND_DOCKER_TAG
    type: string
    default: ''

variables:
  DOCKER_USER: 'kalusahu902'
  BACKEND_IMAGE: 'wanderlust-backend-beta'
  FRONTEND_IMAGE: 'wanderlust-frontend-beta'
  SONAR_PROJECT_KEY: 'wanderlust'
  SONAR_PROJECT_NAME: 'wanderlust'
  SONAR_HOST_URL: 'https://sonarcloud.io/'    # replace with your Sonar host
  # Names of service connections you will create in Azure DevOps:
  DOCKER_SERVICE_CONNECTION: 'azurepipeline'
  SONAR_SERVICE_CONNECTION: 'SonarServiceConnection'

stages:
- stage: Validate
  displayName: Validate parameters
  jobs:
  - job: ValidateJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        if [ -z "${{ parameters.FRONTEND_DOCKER_TAG }}" ] || [ -z "${{ parameters.BACKEND_DOCKER_TAG }}" ]; then
          echo "ERROR: FRONTEND_DOCKER_TAG and BACKEND_DOCKER_TAG must be provided (set them when running the pipeline)";
          exit 1
        fi
      displayName: 'Check provided tags'

- stage: Checkout
  displayName: Git Checkout
  jobs:
  - job: Checkout
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true

- stage: Security
  displayName: Security Scans
  dependsOn: Checkout
  jobs:
  - job: Trivy
    displayName: Trivy FS Scan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        # install trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $(System.DefaultWorkingDirectory)/trivy
        $(System.DefaultWorkingDirectory)/trivy fs . --format table --exit-code 0 --severity HIGH,CRITICAL --output trivy-report.txt || true
      displayName: 'Run Trivy filesystem scan'
    - publish: trivy-report.txt
      artifact: TrivyReport

  - job: OWASP
    displayName: OWASP Dependency Check
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: dependency-check-build-task@6
      inputs:
        scanPath: '$(Build.SourcesDirectory)'
        format: 'ALL'
        outDir: '$(Build.ArtifactStagingDirectory)/dependency-check-report'

    - publish: '$(Build.ArtifactStagingDirectory)/dependency-check-report'
      artifact: OWASPReport

- stage: SonarQube
  displayName: SonarQube Analysis
  dependsOn: Security
  jobs:
  - job: Sonar
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: '$(SONAR_SERVICE_CONNECTION)'         # use correct service connection variable
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONAR_PROJECT_KEY)'
        cliProjectName: '$(SONAR_PROJECT_NAME)'
        extraProperties: |
          sonar.host.url=$(SONAR_HOST_URL)

    - task: SonarQubeAnalyze@5

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

- stage: EnvSetup
  displayName: Environment setup scripts
  dependsOn: SonarQube
  jobs:
  - job: Setup
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        cd Automations && bash updatebackendnew.sh
      displayName: 'Backend env setup'
    - script: |
        cd Automations && bash updatefrontendnew.sh
      displayName: 'Frontend env setup'

- stage: DockerBuildAndPush
  displayName: Docker build & push
  dependsOn: EnvSetup
  jobs:
  - job: DockerJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build & push backend'
      inputs:
        command: buildAndPush
        repository: $(BACKEND_IMAGE)
        dockerfile: backend/Dockerfile
        containerRegistry: '$(DOCKER_SERVICE_CONNECTION)'     # use correct variable here
        tags: |
          ${{ parameters.BACKEND_DOCKER_TAG }}

    - task: Docker@2
      displayName: 'Build & push frontend'
      inputs:
        command: buildAndPush
        repository: $(FRONTEND_IMAGE)
        dockerfile: frontend/Dockerfile
        containerRegistry: '$(DOCKER_SERVICE_CONNECTION)'     # use correct variable here
        tags: |
          ${{ parameters.FRONTEND_DOCKER_TAG }}

- stage: TriggerCD
  displayName: Trigger CD pipeline
  dependsOn: DockerBuildAndPush
  jobs:
  - job: TriggerCD
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Trigger CD pipeline via REST API (example uses a PAT stored in variable SYSTEM_ACCESSTOKEN or a variable)"
        # Example using Azure DevOps REST API (replace placeholders)
        # curl -u :$(PAT) -X POST \
        #  -H "Content-Type: application/json" \
        #  --data "{\"resources\":{\"repositories\":{}} , \"templateParameters\":{\"FRONTEND_DOCKER_TAG\":\"${{ parameters.FRONTEND_DOCKER_TAG }}\",\"BACKEND_DOCKER_TAG\":\"${{ parameters.BACKEND_DOCKER_TAG }}\"}}" \
        #  "https://dev.azure.com/<ORG>/<PROJECT>/_apis/pipelines/<CD_PIPELINE_ID>/runs?api-version=7.1-preview.1"
        echo "Add a real trigger here (service hook or REST call)"
      displayName: 'Trigger CD - placeholder'
